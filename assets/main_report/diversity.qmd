--- 
params:
    group: "xan_test"
    refs: "22_331_assembly"
    samp_data: "_test_data/metadata_medium.csv"
    ref_data: "_test_data/merged_assembly_stats.tsv"
    sendsketch: "_test_data/sendsketch"
    variant_data: "_test_data/variant_data"
    ani_matrix: "_test_data/xan_test_comp.csv"
    core_phylo: "_test_data/xan_test.treefile"
    multiqc: "_test_data/multiqc"
    quast: "_test_data/quast"
    versions: "_test_data/software_versions.yml"
execute:
  echo: false
---

```{r load_libraries, warning=FALSE, message=FALSE, file='load_libraries.R'}
# When running manually for development: source('load_libraries.R')
```

```{r parse_inputs, file='parse_inputs.R'}
# When running manually for development: source('parse_inputs.R')
```

# Diversity

```{r div_setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width = 10, warning = FALSE)
```

```{r div_libraries, include=FALSE}
library(phylocanvas)
library(ape)
library(tidyverse)
library(palmerpenguins)
library(ade4)
library(adegenet)
library(poppr)
library(ggtree)
library(igraph)
library(visNetwork)
library(phangorn)
library(ggplot2)
library(ggnewscale)
```

### *Things to address:*

1.  There are lots of NAs in metadata. I ran into issues when trying run poppr and I was trying to select a specific column to color nodes. As a quick workaround, changed these to 'unknown', but what is a better solution?
2.  The assembly prefix in sample names present in SNP aln output and treefile need to be addressed. In initial tool testing stage, I (Martha) have provided some quick workarounds, but this should be addressed at a larger level.

```{r div_parse_inputs}
#ref_meta <- read.csv(params$ref_data, sep = '\t')
#ref_meta$modified_id <- gsub(ref_meta$LastMajorReleaseAccession, pattern = ".", replacement = "_", fixed = TRUE)
samp_meta <- read.csv(params$samp_data, sep = ',')
samp_meta$modified_id <- paste0(gsub(samp_meta$sample, pattern = "-", replacement = "_", fixed = TRUE), "_T1")
ani_matrix <-  read.csv(params$ani_matrix, sep = ',', check.names = FALSE)
#core_tree <- ape::read.tree(params$core_phylo)
snp_trees <- ape::read.tree(file.path(params$variant_data, "xan_test_22_331_assembly.treefile"))
snp_alignment<-ape::read.dna(file.path(params$variant_data, "xan_test_22_331_assembly.fasta"), format =  "fasta")
#Rename sample names so they don't have prefixes-may be better way
```

## SNP phylogeny

```{r div_snp_tree_config, include=FALSE}
#Rename tree tip labels
oldtips<-snp_trees$tip.label
newtips <- gsub(".*_assembly_", "", oldtips)
snp_trees$tip.label<-newtips

# Root tree
#option1
snp_trees_rootref <- root(snp_trees, "REF")
#option2
snp_trees_midpoint<-midpoint(snp_trees)
```

### ggtree option (starting point)

*May not be most generalizable as one has to specify how color tips-but just another tree option. Very powerful package-but trees are not interactive*

```{r ggtree starting point, fig.height = 7, eval = ! is.null(snp_trees)}
gg <- ggtree(snp_trees_midpoint) %<+% samp_meta +
  geom_tiplab(size=2.5) +
  geom_tippoint(aes(color=factor(year),fill=factor(year)), size=4.5, stroke=0, alpha=0.75) +
  theme(legend.position="left") +
  guides(color = guide_legend(override.aes = list(size=1))) +
  geom_treescale(fontsize =2.5) 
gg
```

### Phylocanvas version

# Plot tree

```{r div_snp_phylo, fig.height = 7, eval = ! is.null(snp_trees)}
phycanv <- phylocanvas(snp_trees_midpoint, treetype = "rectangular", alignlabels = T, showscalebar = T, width = "100%")
phycanv
```

```{asis div_no_snp_phylo, echo = is.null(snp_trees)}
There is no tree to draw, probably because there were too few samples.
More info will be added later.
```

## Minimum spanning network

### *Questions to address*

1.  Important discussion point-for running poppr, will user decide on SNP threshold? This differs depending on dataset. Can we use something like poppr *cutoff_predictor* function?

*Martha is actively working on this. So far looking into Visnetwork, but another option is networkD3?*

```{r poppr_config, include=FALSE}
#Specific to output from perl script vcftosnpaln, so need to extract REF from genind (ref remains after using )
snp_aln.gi <- DNAbin2genind(snp_alignment)
snp_aln.gi <- snp_aln.gi[indNames(snp_aln.gi) != "REF"]

#Extract just sample data for relevant sample group(s)? Way to get this from other output and just pull here? 

#Need to rename samples so no longer have prefix (may be better way)
genind_names<-indNames(snp_aln.gi)
cleaned_names <- gsub("22_331_assembly_", "", genind_names)
indNames(snp_aln.gi) <- cleaned_names


```
