---
title: Pathogen Surveillance Report
params:
  inputs: "_test_data/test--xan_test"
execute:
  echo: false
---

```{r knitr_settings}
knitr::opts_chunk$set(echo = FALSE, fig.width = 10, warning = FALSE, message = FALSE)
```

 
```{r load_libraries, warning=FALSE, message=FALSE}
library(dplyr)
library(ggplot2)
library(readr)
library(knitr)
library(purrr)
library(yaml)
library(phylocanvas)
library(ape)
library(magrittr)
library(pheatmap)
library(heatmaply)
library(tidyverse)
library(palmerpenguins)
library(ade4)
library(adegenet)
library(poppr)
library(ggtree)
library(igraph)
library(visNetwork)
library(phangorn)
library(ggplot2)
library(ggnewscale)
library(kableExtra)
library(plotly)
library(webshot2)
library(metacoder)
library(psminer) # Install with: 
devtools::install_github("grunwaldlab/psminer")
library(ggdendro)
library(rcrossref)
```

```{r parse_inputs}
group_path <- file.path(params$inputs, "inputs", "group_id.txt")
sample_data_path <- file.path(params$inputs, "inputs", "samp_data.csv")
ref_data_path <- file.path(params$inputs, "inputs", "ref_data")
assigned_refs_path <- file.path(params$inputs, "inputs", "assigned_refs.csv")
 
group <- read_lines(group_path)
sample_data <- psminer::parse_sample_meta(sample_data_path, assigned_refs_path, group)
ref_data <- psminer::parse_ref_meta(ref_data_path, assigned_refs_path, sample_data_path, group)

# Parse sendsketch data
sendsketch_paths <- list.files(file.path(params$inputs, "inputs", "sendsketch"), full.names = T)
sketch_data <- psminer::parse_sendsketch(sendsketch_paths)

# Parse variant data
variant_data_path <- file.path(params$inputs, "inputs", "variant_data")
snp_tree_paths <- list.files(variant_data_path, pattern = "\\.treefile$", full.names = TRUE)
vcf_paths <- list.files(variant_data_path, pattern = "\\.vcf\\.gz$", full.names = TRUE)
snp_align_paths <- list.files(variant_data_path, pattern = "\\.fasta$", full.names = TRUE)

# Parse ANI matrix
ani_matrix_path <- file.path(params$inputs, "inputs", "ani_matrix.csv")
ani_matrix <- psminer::parse_ani_matrix(ani_matrix_path)

# Parse core gene phylogeny
core_phylo_path <- file.path(params$inputs, "inputs", "core_phylo.treefile")

# Parse quality control data (currently not used)
multiqc_path <- file.path(params$inputs, "inputs", "multiqc")
multiqc_report_path <- file.path(multiqc_path, 'multiqc_report.html')
quast_path <- file.path(params$inputs, "inputs", "quast")
quast_ref_names <- list.files(quast_path)
quast_report_paths <- file.path(quast_path, quast_ref_names, 'report.html')

# Parse messages
messages_path <- file.path(params$inputs, "inputs", "messages.tsv")
messages <- readr::read_tsv(messages_path)

# Parse version data
version_path <- file.path(params$inputs, "inputs", "versions.yml")
version_data <- psminer::parse_software_meta(version_path)
```

# Summary

This report is produced by the **`nf-core/pathogensurveillance` pipeline**.

**Report group:** `r group`                           
**Sample count:** `r nrow(sample_data)`                 
**Last updated:** `r format(Sys.time(), '%B %d , %Y')`       
**Pipeline version:** {{< var version >}}

## Status

Perhaps a table with a list of majors steps and a icon next to each for done/queued/failed.

```{r generate-tables, eval=FALSE}
# Generate the tables using the status_tables function
tables <- status_tables(messages, interactive = TRUE)
```

::: {.panel-tabset}

## Simple Summary Table

```{r simple-table, eval=FALSE}
tables$simpleTable
```

## Detailed Samples Table

```{r detailed-samples-table, eval=FALSE}
tables$detailedSamplesTable
```

## Detailed Groups Table

```{r detailed-groups-table, eval=FALSE}
tables$detailedGroupsTable
```

:::


## {{< bi clipboard-data >}} Input data

```{r}
psminer::print_sample_metadata(sample_data)
```


# Identification

## Initial identification

The following data provides tentative classifications of the samples based on exact matches of a subset of short DNA sequences. 
These are intended to be preliminary identifications.
For more robust identifications based on whole genome sequences, see the results of the core genome phylogeny below.

::: panel-tabset
### Taxonomic classification summary

```{r}
top_hits <- psminer::best_sendsketch_hits(sketch_data)
unique_tax <- unique(sub(top_hits$taxonomy, pattern = ';s:(.+);.+$', replacement = ';s:\\1')) # ignore below species level information
is_single_taxon <- length(unique_tax) == 1
```

```{r fig.height = 8, eval = !is_single_taxon}
psminer::plot_sendsketch_taxonomy(sketch_data)
```

```{r, results='asis', eval = !is_single_taxon}
cat('
::: {.callout-tip collapse="true"}
## About this plot

This plot shows the distribution of tentative taxonomic classifications for all samples.
Only the "highest scoring" results for each sample is considered.

Hover your cursor over parts of the sunburst plot will display the number of samples in each taxon.
Clicking on a section will subset the plot to that taxon.
Clicking on the middle will undo the subset.
:::
')
```

```{r, results='asis', eval = is_single_taxon}
n_samp <- nrow(top_hits)
formatted_classification <- unique_tax %>%
    gsub(pattern = "[a-z]+:", replacement = "") %>%
    gsub(pattern = ";", replacement = " > ") 
cat(paste0(
"Initial classification of ", ifelse(n_samp == 1, "the sample", paste0(n_samp, " samples")),
" identified ", ifelse(n_samp == 1, "it", "all of them"), " as:\n\n",
"**", formatted_classification, "**"
))
```


### Per-sample classification

```{r sketchtable, fig.width=5}
psminer::sketch_idtb(sketch_data)
```

::: {.callout-tip collapse="true"}
## About this table

This table shows the "highest scoring" tentative taxonomic classification for each sample.
Included metrics can provide insights into how each sample compares with reference genomes on online databases and the likelihood these comparisions are valid.

* **Sample:** The sample ID submitted by the user.
* **WKID:** Weighted k-mer Identity, adjusted for genome size differences.
* **ANI:** An estimate of average nucleotide identity (ANI), derived from WKID and kmer length.
* **Completeness:** The percentage of the reference genome represented in the query.
* **Top Hit:** The name of the reference genome most similar to each sample based on the scoring criteria used.
:::

::: 

## Rigorous identification

This section includes phylogenetic trees of samples with references sequences downloaded from RefSeq meant to provide a reliable identification using genome-scale data.

::: panel-tabset

### Core gene phylogeny

```{r id_core_phylo, eval = length(read_lines(core_phylo_path)) > 0}
psminer::make_phylogeny(core_phylo_path, sample_data, ref_data, interactive = TRUE)
```

```{r, results='asis', eval = length(read_lines(core_phylo_path)) > 0}
cat('
::: {.callout-tip collapse="true"}
## About this plot

This a core gene phylogeny of samples with RefSeq genomes for context.
A core gene phylogeny uses the sequences of all gene shared by all of the genomes included in the tree to infer evolutionary relationships.
It is the most robust identification provided by this pipeline, but its precision is still limited by the availability of similar reference sequences. 
:::
')
```

```{r, results='asis', eval = length(read_lines(core_phylo_path)) == 0}
cat('
Could not generate core genome phylogeny.
')
```


### ANI heatmap and dendrogram

```{r ANI dendrogram, fig.height = 8, fig.width=8}
psminer::make_ani_heatmap(ani_matrix, ref_data, sample_data)
```

::: {.callout-tip collapse="true"}
## About this plot

This plot shows the results of comparing the similarity of all samples and references to eachother.
These similarity metrics are based on the presence and abundance of short exact sequence matches between samples (i.e. comparisons of k-mer sketches).
These measurments are not as reliable as the methods used to create phylogenetic trees, but may be useful if phylogenetic trees could not be inferred for these samples.
:::


:::

## Genetic diversity

### SNP trees

```{r parse_snp_trees}
snp_trees <- parse_snp_trees(snp_tree_paths, group)
snp_tree_js <- unlist(lapply(snp_trees, function(tree) {
    as.character(htmltools::as.tags(psminer::make_phylogeny(tree, sample_data, ref_data, interactive = TRUE), standalone = TRUE))
}))
```


```{r plot_snp_trees, results='asis', eval = length(snp_trees) > 0}
cat(paste0(collapse = "\n",
'
::: panel-tabset
',
paste0('### ', names(snp_tree_js), '\n\n'),
snp_tree_js,
'
:::
'
))
```


```{asis div_no_snp_phylo, echo = length(snp_trees) == 0}
There is no tree to draw, probably because there were too few samples.
More info will be added later.
```


### Minimum spanning network
```{r make MSN}
#TODO make parse snp align function
#TODO make tabs for each population? 
#TODO make interactive tree option
#TODO add error warning fewer 3 samples
#TODO add error if fewer than 3 samples because we cannot use cutoff_predictor function. 
#To avoid erroring out, should then set very low snp threshold to 1?
psminer::make_MSN(snp_align_paths, sample_data, snp_threshold=1, show_MLG_table=TRUE, user_seed=1)
```

# References

## {{< fa flask >}} Methods

The `pathogen surveillance` pipeline used the following tools that should be referenced as appropriate:

-   A sample is first identified to genus using sendsketch and further identified to species using sourmash [@brown2016sourmash].
-   The `nextflow` data-driven computational pipeline enables deployment of complex parallel and reactive workflows [@di2017nextflow].

## {{< bi sliders >}} Input settings

Add settings used to run Nextflow and the pipeline parameters.

## {{< bi gear-wide-connected >}} Analysis software

```{r}
DT::datatable(version_data)
```

## version and packages

```{r, include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
```

```{r}
sessionInfo()
```

## {{< ai doi >}} Bibliography

::: {#refs}
:::

# About

{{< bi file-earmark-person >}} The **`nf-core/pathogen surveillance` pipeline** was developed by: Zach Foster, Martha Sudermann, Camilo Parada-Rojas, Fernanda Iruegas-Bocardo, Ricardo Alcalá-Briseño, [Jeff Chang](http://changlab.cgrb.oregonstate.edu/) and [Nik Grunwald](http://grunwaldlab.cgrb.oregonstate.edu/).

Other contributors include: [Alex Weisberg](https://alexandra-weisberg.com/), ...

::: callout-tip
## Feedback

To contribute, provide feedback, or report bugs please visit our [github repository](https://github.com/nf-core/pathogensurveillance).
:::

Please cite this pipeline and nf-core in publications as follows:

{{< bi file-earmark-pdf-fill >}} Foster et al. 2024. PathogenSurveillance: A nf-core pipeline for rapid analysis of pathogen genome data. In preparation.

{{< bi file-earmark-pdf-fill >}} Di Tommaso, Paolo, Maria Chatzou, Evan W Floden, Pablo Prieto Barja, Emilio Palumbo, and Cedric Notredame. 2017. Nextflow Enables Reproducible Computational Workflows. Nature Biotechnology 35 (4): 316--19. https://doi.org/10.1038/nbt.3820.

Icons for this report were sampled from [Bootstrap Icons](https://icons.getbootstrap.com), [Freepick](https://www.freepik.com), [Academicons](https://jpswalsh.github.io/academicons/), and [Font Awesome](https://fontawesome.com).
