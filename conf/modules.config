/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: BBMAP_SENDSKETCH {
        ext.args = 'printall=t reads=10m samplerate=0.5 minkeycount=2'
    }

    withName: BWA_MEM {
        ext.args = '-M'
    }

    withName: PICARD_CREATESEQUENCEDICTIONARY {
        ext.prefix = { "${fasta.getBaseName()}" }
        cpus   = 1
    }

    withName: PICARD_ADDORREPLACEREADGROUPS {
        ext.args = { "--RGID ${meta.id} --RGLB ${meta.id} --RGPL Illumina --RGPU ${meta.id} --RGSM ${meta.id}" }
        ext.prefix = { "${meta.id}.addorreplacereadgroups" }
        cpus   = 1
    }

    withName: 'PICARD_SORTSAM.*' {
        ext.args = '--CREATE_INDEX true'
        ext.prefix = { "${meta.id}.sortsam" }
        cpus   = 1
    }

    withName: PICARD_MARKDUPLICATES {
        ext.args = '--CREATE_INDEX true'
        ext.prefix = { "${meta.id}.markduplicates" }
        cpus   = 1
    }

    withName: TABIX_TABIX {
        ext.args = '-p vcf'
    }

    withName: GATK4_VARIANTFILTRATION {
        ext.args = '--genotype-filter-expression "isHet == 1" --genotype-filter-name "isHetFilter" --set-filtered-genotype-to-no-call'
        ext.prefix = { "${meta.id}.variantfiltration" }
    }

    withName: VCFLIB_VCFFILTER {
        ext.args = '-f "ABHet < 0.0 | ABHet > 0.33" -f "ABHom < 0.0 | ABHom > 0.97" -f "MaxAASR > 0.4" -f "MQ > 30"'
        ext.prefix = { "${meta.id}.vcffilter" }
    }

    withName: SPADES {
        ext.args = '--careful -k 21,33,55,77,99'
    }

    withName: FILTER_ASSEMBLY {
        ext.args = '--cov_cutoff 1 --len_cutoff 100'
    }

    withName: BAKTA_BAKTA {
        ext.args = '--force --skip-plot'
    }
    
    withName: MAFFT_SMALL {
        ext.prefix = { "${fasta.getSimpleName()}_aligned" }
    }

    withName: IQTREE2 {
        ext.args = '--seqtype DNA -m GTR'
    }

    withName: IQTREE2_SNP {
        ext.args = '--seqtype DNA -m GTR+ASC'
    }

    withName: 'SOURMASH_SKETCH_GENOME' {
        ext.args = "dna --param-string 'scaled=1000,k=21,k=31,k=51'"
    }

    withName: 'SOURMASH_SKETCH_READS' {
        ext.args = "dna --param-string 'scaled=1000,k=21,k=31,k=51'"
    }

    withName: KHMER_TRIMLOWABUND {
        ext.args = "-C 3 -Z 18 -V"
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h  * task.attempt, 'time'    ) }    }

    withName: SOURMASH_COMPARE {
        ext.args = "-k 31 --ani"
    }

    withName: 'MAIN_REPORT.*' {
        publishDir = [
            path: { "${params.outdir}/reports" },
            mode: params.publish_dir_mode,
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
