/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// function to decide between copying and linking process files
// high: copy everything
// medium: copy only high priority files (things that are small + useful, like the main report and fastqc)
// low: link everything

process {

    // Default settings for all modules
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: check_prio(params.copymode,'low'),
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    cache = params.cache_type ?: true
    errorStrategy = { return task.attempt > 1 ? 'finish' : 'retry' }
    maxRetries = 1
    maxErrors = 10
    containerOptions = { "--memory-swappiness 0 --memory-swap ${task.memory.mega.intValue()}m" } // Dont use swap

    // Module-specific settings
    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: check_prio(params.copymode,'high'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        cpus   = { 1                   }
        memory = { 1.GB * task.attempt }
        time   = { 1.h  * task.attempt }
    }

    withName: INITIAL_CLASSIFICATION {
        cpus   = { 1                   }
        memory = { 1.GB * task.attempt }
        time   = { 1.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PICK_ASSEMBLIES {
        cpus   = { 1                   }
        memory = { 1.GB * task.attempt }
        time   = { 1.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DOWNLOAD_ASSEMBLIES {
        cpus   = { 1                   }
        memory = { 500.MB * task.attempt }
        time   = { 24.h  * task.attempt }
        storeDir = { params.data_dir == "false" ? null : "${params.data_dir}/assemblies" }
        errorStrategy = { sleep(Math.pow(4, task.attempt) * 60000 as long); return task.attempt > 2 ? 'ignore' : 'retry' }
        maxForks = 5
        maxRetries = 3
        maxErrors = 15
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MAKE_GFF_WITH_FASTA {
        cpus   = { 1                   }
        memory = { 1.GB * task.attempt }
        time   = { 1.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        cpus      = { 2     * task.attempt }
        memory    = { 8.GB  * task.attempt }
        time      = { 12.h  * task.attempt }
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode, 'medium'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SUBSET_READS {
        cpus   = { 2                   }
        memory = { 1.GB * task.attempt }
        time   = { 2.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: check_prio(params.copymode,'high'),
            pattern: '*_versions.yml'
        ]
    }

    withName: SAMTOOLS_INDEX {
        ext.args = '-c'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BBMAP_SENDSKETCH {
        ext.args = 'tossbrokenreads=t printall=t reads=10m samplerate=0.5 minkeycount=2'
        cpus   = { 1                   }
        memory = { 1.GB * task.attempt }
        time   = { 1.h  * task.attempt }
        errorStrategy = { sleep(Math.pow(4, task.attempt) * 6000 as long); return task.attempt > 2 ? 'finish' : 'retry' }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BWA_INDEX {
        cpus   = { 1                   }
        memory = { 8.GB * task.attempt } // It seems `bwa index` might start using disk instead of RAM when running out of RAW rahter than just failing, slowing it do.
        time   = { 24.h * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BWA_MEM {
        ext.args = '-M'
        cpus   = { 8                    }
        memory = { 16.GB * task.attempt }
        time   = { 48.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PICARD_CREATESEQUENCEDICTIONARY {
        ext.prefix = { "${fasta.getBaseName()}" }
        cpus   = 1
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PICARD_FORMAT {
        ext.args = { "--RGID ${meta.id} --RGLB ${meta.id} --RGPL Illumina --RGPU ${meta.id} --RGSM ${meta.id}" }
        ext.args2 = { params.temp_dir ? "--TMP_DIR ${params.temp_dir}" : "" }
        ext.args3 = ''
        ext.prefix = { "${meta.id}.formatted" }
        cpus   = 1
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SRATOOLS_FASTERQDUMP {
        cpus   = { 2                   }
        memory = { 8.GB * task.attempt }
        time   = { 48.h * task.attempt }
        ext.args = { params.temp_dir ? "--temp ${params.temp_dir}" : "" }
        storeDir = { params.data_dir == "false" ? null : "${params.data_dir}/reads" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TABIX_TABIX {
        ext.args = '-p vcf'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GATK4_VARIANTFILTRATION {
        ext.args = '--genotype-filter-expression "isHet == 1" --genotype-filter-name "isHetFilter" --set-filtered-genotype-to-no-call'
        ext.prefix = { "${meta.id}.variantfiltration" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: VCFLIB_VCFFILTER {
        ext.args = '-f "ABHet < 0.0 | ABHet > 0.33" -f "ABHom < 0.0 | ABHom > 0.97" -f "MaxAASR > 0.4" -f "MQ > 30"'
        ext.prefix = { "${meta.id}.vcffilter" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPADES {
        cpus   = { meta.kingdom == 'Bacteria' ? 4 * task.attempt                      : 8 * Math.pow(2, task.attempt - 1)     }
        memory = { meta.kingdom == 'Bacteria' ? 15.GB * Math.pow(2, task.attempt - 1) : 30.GB * Math.pow(4, task.attempt - 1) }
        time   = { 24.h  * task.attempt                 }
        errorStrategy = { return task.attempt > 2 ? 'ignore' : 'retry' }
        maxRetries = 2
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FLYE.*' {
        cpus   = { meta.kingdom == 'Bacteria' ? 4 * task.attempt                      : 8 * Math.pow(2, task.attempt - 1)     }
        memory = { meta.kingdom == 'Bacteria' ? 15.GB * Math.pow(2, task.attempt - 1) : 30.GB * Math.pow(4, task.attempt - 1) }
        time   = { 24.h  * task.attempt                                                                                       }
        errorStrategy = { return task.attempt > 2 ? 'ignore' : 'retry' }
        maxRetries = 2
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FILTER_ASSEMBLY {
        ext.args = '--cov_cutoff 1 --len_cutoff 100'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FIND_ASSEMBLIES {
        storeDir = { params.data_dir == "false" ? null : "${params.data_dir}/assembly_metadata" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAKTA_BAKTADBDOWNLOAD {
        ext.args = '--type light'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAKTA_BAKTADBDOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = { "--type ${params.bakta_db_type}" }
        storeDir = { params.data_dir == "false" ? null : "${params.data_dir}/bakta_db" }
    }

    withName: BUSCO_DOWNLOAD {
        storeDir = { params.data_dir == "false" ? null : "${params.data_dir}/busco_db" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BAKTA_BAKTA {
        cpus   = { 4                   }
        memory = { 8.GB * task.attempt }
        time   = { 24.h * task.attempt }
        ext.args = '--force --skip-plot --skip-crispr'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QUAST {
        cpus   = { 4                   }
        memory = { 8.GB * task.attempt }
        time   = { 24.h * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'medium'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        cpus   = { 4                   }
        memory = { 8.GB * task.attempt }
        time   = { 24.h * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MAFFT_SMALL {
        ext.prefix = { "${fasta.getSimpleName()}_aligned" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: IQTREE2 {
        ext.args = '--seqtype DNA -m GTR'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: IQTREE2_SNP {
        ext.args = '--seqtype DNA -m GTR+ASC'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT {
        ext.args = { "--prefix ${meta.id}_" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode, 'medium'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SEQKIT_SLIDING {
        ext.args = '-s 150 -W 150'
        ext.prefix = { "${meta.id}_chopped" }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SOURMASH_SKETCH {
        ext.args = "dna --param-string 'scaled=1000,k=21,k=31,k=51'"
        cpus   = { 1                   }
        memory = { 8.GB * task.attempt }
        time   = { 4.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TRIM_AND_SKETCH {
        ext.args  = "-C 3 -Z 18 -V"
        ext.args2 = "dna --param-string 'scaled=1000,k=21,k=31,k=51'"
        cpus      = { 1     * task.attempt }
        memory    = { 16.GB * task.attempt }
        time      = { 12.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SOURMASH_COMPARE {
        ext.args = "-k 31 --ani"
        cpus      = { 4     * task.attempt }
        memory    = { 16.GB * task.attempt }
        time      = { 12.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MAIN_REPORT.*' {
        publishDir = [
            path: { "${params.outdir}/reports" },
            mode: check_prio(params.copymode, 'high'),
            overwrite: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = "--no-cache"
    }

    withName: 'GRAPHTYPER_VCFCONCATENATE' {
        cpus   = 1
        memory = { 16.GB * task.attempt }
        time   = { 12.h  * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PIRATE {
        time   = { 240.h  * task.attempt }
        cpus   = { 8     * task.attempt }
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GRAPHTYPER_GENOTYPE {
        ext.args = '--no_filter_on_proper_pairs'
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'low'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PREPARE_REPORT_INPUT {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: check_prio(params.copymode,'high'),
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

